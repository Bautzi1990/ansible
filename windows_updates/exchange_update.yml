---
# Playbook for Exchange Server Update
# WICHTIG: EXCHANGE_TARGET (also anderer DAG-Node) muss definiert sein

- name: Windows Updates Exchange Server
  hosts:
    - all
  serial:
    - 1
  # strategy: free
  gather_facts: yes
  
  vars:
    targetname: '{{ lookup("env", "EXCHANGE_TARGET") }}'

  tasks:
    - name: PowerShell script Pre-Installation Exchange
      ansible.windows.win_powershell:
        script: |
          # Exchange Module laden
          Add-PSSnapin Microsoft.Exchange.Management.PowerShell.SnapIn

          # Prüfen ob bereits im Wartungsmodus (ClusterNode not UP und keine Datenbank aktiv gemountet)
          if ((Get-ClusterNode -Name $env:Computername).state -ne "Up" -and (Get-MailboxDatabaseCopyStatus -Server $env:ComputerName | Where {$_.Status -eq "Mounted"}).Count -eq 0) {
              Write-Host "Server $env:ComputerName befindet sich bereits im WARTUNGSMODUS" -ForegroundColor Green
              Write-Host "Keine Änderung vorgenommen..." -ForegroundColor Green
              Exit
          }

          # Sicherheitsfunktionen abschalten (PS-Execution-Policy und Defender)
          Write-Host "Server $env:ComputerName wir in den Wartungsmodus versetzt..."
          Write-Host "PS-Policy und Defender werden deaktiviert"
          Set-ExecutionPolicy Unrestricted -force
          Set-MpPreference -DisableRealtimeMonitoring $true
          Sleep -Seconds 3
          Write-Host "PS-Policy unrestriced und Defender deaktiviert"

          # Hub-Transport abschalten
          # Es werden keine Mails mehr angenommen
          Write-Host "Hub-Transport wird deaktiviert und Mail-Queues verschoben..."
          Set-ServerComponentState $env:ComputerName –Component HubTransport –State Draining –Requester Maintenance
          Sleep -Seconds 5

          # Bestehende Mails werden aus der Queue auf einen anderen Server verschoben
          Redirect-Message -Server $env:ComputerName -Target '{{ targetname }}' -Confirm:$false
          Write-Host "Hub-Transport deaktiviert"

          # ClusterNode in Suspend-Mode
          Write-Host "ClusterNode $env:ComputerName wird angehalten"
          Suspend-ClusterNode –Name $env:ComputerName
          Sleep -Seconds 3
          Write-Host "ClusterNode $env:ComputerName angehalten"

          # Mailbox-Datenbanken verschieben und 
          Write-Host "Aktive Mailboxdatenbanken werden evakuiert"
          Set-MailboxServer $env:ComputerName –DatabaseCopyActivationDisabledAndMoveNow $true
          Set-MailboxServer $env:ComputerName –DatabaseCopyAutoActivationPolicy Blocked
          Write-Host "Skript wartet, bis Datenbanken evakuiert wurden - Prüfintervall: 30 Sekunden"
          While ((Get-MailboxDatabaseCopyStatus -Server $env:ComputerName | Where {$_.Status -eq "Mounted"}).Count -ne 0) 
          {
            Sleep -Seconds 30
          }
          Write-Host "Datenbanken wurden alle evakuiert - keine aktive Datenbankkopie mehr auf $env:ComputerName aktiv"

          # Server-Komponenten deaktivieren
          Set-ServerComponentState $env:ComputerName –Component ServerWideOffline –State InActive –Requester Maintenance
          Write-Host "Alle Server-Komponenten deaktiviert"

          # Prüfen ob im Wartungsmodus (keine aktiven Datenbanken und ClusterNode not UP)
          if ((Get-ClusterNode -Name $env:Computername).state -ne "Up" -and (Get-MailboxDatabaseCopyStatus -Server $env:ComputerName | Where {$_.Status -eq "Mounted"}).Count -eq 0) {
              Write-Host "Server $env:ComputerName befindet sich im WARTUNGSMODUS" -ForegroundColor Green
          }
          else {
              Write-Host "Server $env:ComputerName befindet sich NICHT im WARTUNGSMODUS" -ForegroundColor Red
              Write-Host "Bitte prüfen Sie die Dienste und Befehle auf Meldungen" -ForegroundColor Red
          }
      register: exchange_result


    - name: Create a snapshot, auf Gross/Kleinschreibung des Hostnamen achten
      community.vmware.vmware_guest_snapshot:
        hostname: '{{ lookup("env", "VMWARE_HOST") }}'
        username: '{{ lookup("env", "VMWARE_USER") }}'
        password: '{{ lookup("env", "VMWARE_PASSWORD") }}'
        validate_certs: false
        datacenter: "{{ datacenter_name }}"
        folder: /
        name: "{{ inventory_hostname_short }}"
        state: present
        snapshot_name: snap_ansible
        description: Snapshot_von_Ansible
      delegate_to: localhost  
  

    - name: search and install updates und Logfile schreiben
      win_updates:
        category_names:
          - CriticalUpdates
          - SecurityUpdates
          - UpdateRollups
          - Updates
            #state: searched
        reboot: yes
        reboot_timeout: 1200
        log_path: c:\ansible_{{ inventory_hostname }}.txt
      register: update_result


    - name: PowerShell script Post-Installation Exchange
      ansible.windows.win_powershell:
        script: |
          Write-Host "Server-Komponeten werden aktiv gesetzt"
          Set-ServerComponentState $env:ComputerName –Component ServerWideOffline –State Active –Requester Maintenance
 
          # ClusterNode wieder UP setzen
          Write-Host "ClusterNode wird online genommen"
          Resume-ClusterNode –Name $env:ComputerName
 
          # Mailbox-Datenbank wieder online setzen und für Rückschwenk aktivieren
          # KEIN aktives zurückschwenken
          Write-Host "Mailboxdatenbanken werden wieder aktiv genommen"
          Write-Host "Es wird keine Datenbank aktiv zurückgenommen"
          Set-MailboxServer $env:ComputerName –DatabaseCopyAutoActivationPolicy Unrestricted
          Set-MailboxServer $env:ComputerName –DatabaseCopyActivationDisabledAndMoveNow $false
 
          # Hub-Transport wieder ACTIVE setzen - Mails werden wieder angenommen
          Write-Host "Hub-Transport wird online genommen - Mails werden wieder angenommen"
          Set-ServerComponentState $env:ComputerName –Component HubTransport –State Active –Requester Maintenance
 
          # Aktivierung Defender und PS-Restriction-Policy
          Write-Host "Defender und PS-Policy werden wieder aktiviert"
          Set-MpPreference -DisableRealtimeMonitoring $false
          Set-ExecutionPolicy RemoteSigned -force
 
          # Prüfen ob immer noch imWartungsmodus
          if ((Get-ClusterNode -Name $env:Computername).state -eq "Up") {
              Write-Host "Server $env:ComputerName befindet sich im NORMALMODUS" -ForegroundColor Green
          }
          else {
              Write-Host "Server $env:ComputerName befindet sich immer noch im WARTUNGSMODUS" -ForegroundColor Red
              Write-Host "Bitte prüfen Sie die Dienste und Eventlogs auf Fehler" -ForegroundColor Red
          }
 
          # Prüfroutinen für Dienste und Komponenten - jeweils mit Pause für Prüfung
          Write-Host "###########################################################" -ForegroundColor Yellow
          Write-Host "####### Ausgabe aller wichtigen Dienste zur Prüfung #######" -ForegroundColor Yellow
          Write-Host "###########################################################" -ForegroundColor Yellow
          write-host "`n"
          Write-Host "--- ClusterNode muss UP sein ---" -ForegroundColor Yellow
          Get-ClusterNode –Name $env:ComputerName
         
          Write-Host "--- Test-ServiceHealth ---" -ForegroundColor Yellow
          Write-Host "Alle Rollen müssen RequiredServicesRunning auf TRUE stehen" -ForegroundColor Yellow
          Write-host "`n"
          Test-ServiceHealth | ft -AutoSize
          
          Write-Host "--- Überprüfen aller Server-Komponenten ---" -ForegroundColor Yellow
          Write-Host "Alle Komponenten ACTIVE bis auf ForwardSyncDaemon und ProvisioningRps" -ForegroundColor Yellow
          Write-host "`n"
          Get-ServerComponentState $env:ComputerName | where {$_.State -ne "Active"} | ft
          
          Write-Host "Anzeigen aller Datenbanken" -ForegroundColor Yellow
          Write-host "`n"
          Get-MailboxDatabaseCopyStatus -Server $env:ComputerName | ft
          Write-Host "Fertig!" -ForegroundColor Green
      register: exchange_result



    - name: print variable
      debug:
        msg:
        - '{{ update_result }}'
        - '{{ exchange_result }}'
