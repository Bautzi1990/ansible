---
# Playbook for Exchange Server Update
# WICHTIG: EXCHANGE_TARGET (also anderer DAG-Node) muss definiert sein

- name: Windows Updates Exchange Server
  hosts:
    - all
  serial:
    - 1
  # strategy: free
  gather_facts: yes
  
  vars:
    targetname: '{{ lookup("env", "EXCHANGE_TARGET") }}'

  tasks:
    - name: PowerShell script Pre-Installation Exchange
      ansible.windows.win_powershell:
        script: |
          # Exchange Module laden
          Add-PSSnapin Microsoft.Exchange.Management.PowerShell.SnapIn

          # Prüfen ob bereits im Wartungsmodus (ClusterNode not UP und keine Datenbank aktiv gemountet)
          # if ((Get-ClusterNode -Name $env:Computername).state -ne "Up" -and (Get-MailboxDatabaseCopyStatus -Server $env:ComputerName | Where {$_.Status -eq "Mounted"}).Count -eq 0) {
          if ((Get-MailboxDatabaseCopyStatus -Server $env:ComputerName | Where {$_.Status -eq "Mounted"}).Count -eq 0) {
              echo "Server $env:ComputerName befindet sich bereits im WARTUNGSMODUS"
              echo "Keine Änderung vorgenommen..."
              Exit
          }

          # Sicherheitsfunktionen abschalten (PS-Execution-Policy und Defender)
          echo "Server $env:ComputerName wird in den Wartungsmodus versetzt..."
          echo "PS-Policy und Defender werden deaktiviert"
          Set-ExecutionPolicy Unrestricted -force
          Set-MpPreference -DisableRealtimeMonitoring $true
          Sleep -Seconds 3
          echo "PS-Policy unrestriced und Defender deaktiviert"

          # Hub-Transport abschalten
          # Es werden keine Mails mehr angenommen
          echo "Hub-Transport wird deaktiviert und Mail-Queues verschoben..."
          Set-ServerComponentState -Identity $env:ComputerName –Component HubTransport –State Draining –Requester Maintenance
          Sleep -Seconds 5

          # Bestehende Mails werden aus der Queue auf einen anderen Server verschoben
          Redirect-Message -Server $env:ComputerName -Target '{{ targetname }}' -Confirm:$false
          echo "Hub-Transport deaktiviert"

          # ClusterNode in Suspend-Mode
          echo "ClusterNode $env:ComputerName wird angehalten"
          Suspend-ClusterNode –Name $env:ComputerName
          Sleep -Seconds 3
          echo "ClusterNode $env:ComputerName angehalten"

          # Mailbox-Datenbanken verschieben und 
          echo "Aktive Mailboxdatenbanken werden evakuiert"
          Set-MailboxServer $env:ComputerName –DatabaseCopyActivationDisabledAndMoveNow $true
          Set-MailboxServer $env:ComputerName –DatabaseCopyAutoActivationPolicy Blocked
          echo "Skript wartet, bis Datenbanken evakuiert wurden - Prüfintervall: 30 Sekunden"
          While ((Get-MailboxDatabaseCopyStatus -Server $env:ComputerName | Where {$_.Status -eq "Mounted"}).Count -ne 0) 
          {
            Sleep -Seconds 30
          }
          echo "Datenbanken wurden alle evakuiert - keine aktive Datenbankkopie mehr auf $env:ComputerName aktiv"

          # Server-Komponenten deaktivieren
          Set-ServerComponentState -Identity $env:ComputerName –Component ServerWideOffline –State InActive –Requester Maintenance
          echo "Alle Server-Komponenten deaktiviert"

          # Prüfen ob im Wartungsmodus (keine aktiven Datenbanken und ClusterNode not UP)
          # if ((Get-ClusterNode -Name $env:Computername).state -ne "Up" -and (Get-MailboxDatabaseCopyStatus -Server $env:ComputerName | Where {$_.Status -eq "Mounted"}).Count -eq 0) {
            if ((Get-MailboxDatabaseCopyStatus -Server $env:ComputerName | Where {$_.Status -eq "Mounted"}).Count -eq 0) {  
              echo "Server $env:ComputerName befindet sich im WARTUNGSMODUS"
          }
          else {
              echo "Server $env:ComputerName befindet sich NICHT im WARTUNGSMODUS"
              echo "Bitte prüfen Sie die Dienste und Befehle auf Meldungen"
              Exit
          }
      register: exchange_down_result


    - name: Create a snapshot, auf Gross/Kleinschreibung des Hostnamen achten
      community.vmware.vmware_guest_snapshot:
        hostname: '{{ lookup("env", "VMWARE_HOST") }}'
        username: '{{ lookup("env", "VMWARE_USER") }}'
        password: '{{ lookup("env", "VMWARE_PASSWORD") }}'
        validate_certs: false
        datacenter: "{{ datacenter_name }}"
        folder: /
        name: "{{ inventory_hostname_short }}"
        state: present
        snapshot_name: snap_ansible
        description: Snapshot_von_Ansible
      delegate_to: localhost  
  

    - name: search and install updates und Logfile schreiben
      win_updates:
        category_names:
          - CriticalUpdates
          - SecurityUpdates
          - UpdateRollups
          - Updates
            #state: searched
        reboot: yes
        reboot_timeout: 1200
        log_path: c:\ansible_{{ inventory_hostname }}.txt
      register: update_result


    - name: PowerShell script Post-Installation Exchange
      ansible.windows.win_powershell:
        script: |
          echo "Server-Komponeten werden aktiv gesetzt"
          Set-ServerComponentState -Identity $env:ComputerName –Component ServerWideOffline –State Active –Requester Maintenance
 
          # ClusterNode wieder UP setzen
          echo "ClusterNode wird online genommen"
          Resume-ClusterNode –Name $env:ComputerName
 
          # Mailbox-Datenbank wieder online setzen und für Rückschwenk aktivieren
          # KEIN aktives zurückschwenken
          echo "Mailboxdatenbanken werden wieder aktiv genommen"
          echo "Es wird keine Datenbank aktiv zurückgenommen"
          Set-MailboxServer $env:ComputerName –DatabaseCopyAutoActivationPolicy Unrestricted
          Set-MailboxServer $env:ComputerName –DatabaseCopyActivationDisabledAndMoveNow $false
 
          # Hub-Transport wieder ACTIVE setzen - Mails werden wieder angenommen
          echo "Hub-Transport wird online genommen - Mails werden wieder angenommen"
          Set-ServerComponentState -Identity $env:ComputerName –Component HubTransport –State Active –Requester Maintenance
 
          # Aktivierung Defender und PS-Restriction-Policy
          echo "Defender und PS-Policy werden wieder aktiviert"
          Set-MpPreference -DisableRealtimeMonitoring $false
          Set-ExecutionPolicy RemoteSigned -force
 
          # Prüfen ob immer noch imWartungsmodus
          # if ((Get-ClusterNode -Name $env:Computername).state -eq "Up") {
          #    echo "Server $env:ComputerName befindet sich im NORMALMODUS"
          # }
          # else {
          #     echo "Server $env:ComputerName befindet sich immer noch im WARTUNGSMODUS"
          #     echo "Bitte prüfen Sie die Dienste und Eventlogs auf Fehler"
          # }
 
          # Prüfroutinen für Dienste und Komponenten - jeweils mit Pause für Prüfung
          echo "###########################################################"
          echo "####### Ausgabe aller wichtigen Dienste zur Prüfung #######"
          echo "###########################################################"
          echo "`n"
          # echo "--- ClusterNode muss UP sein ---"
          # Get-ClusterNode –Name $env:ComputerName
         
          echo "--- Test-ServiceHealth ---"
          echo "Alle Rollen müssen RequiredServicesRunning auf TRUE stehen"
          echo "`n"
          Test-ServiceHealth | ft -AutoSize
          
          echo "--- Überprüfen aller Server-Komponenten ---"
          echo "Alle Komponenten ACTIVE bis auf ForwardSyncDaemon und ProvisioningRps"
          echo "`n"
          Get-ServerComponentState -Identity $env:ComputerName | where {$_.State -ne "Active"} | ft
          
          echo "Anzeigen aller Datenbanken"
          echo "`n"
          Get-MailboxDatabaseCopyStatus -Server $env:ComputerName | ft
          echo "Fertig!"
      register: exchange_up_result


    - name: print variable
      debug:
        msg:
        - '{{ update_result }}'
        - '{{ exchange_down_result }}'
        - '{{ exchange_up_result }}'
        
